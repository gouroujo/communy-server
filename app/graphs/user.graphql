extend type Query {
  user (
    id: ID!
    organisationId: ID!
  ): User
  users (
    organisationId: ID
    search: String
    limit: Int
    offset: Int
  ): [User!]
  me: User
}

extend type Mutation {
  updateProfile (
    input: UserUpdateInput!
  ): User!

  joinOrganisation (
    organisationId: ID!
  ) : User!

  answerToEvent (
    eventId: ID!
    answer: EventAnswer!
  ) : User!
}

type User {
  id: ID!
  firstname: String
  lastname: String
  fullname: String
  email: String
  avatar: String
  birthday: Date
  birthplace: String
  phone1: String
  phone2: String

  organisations (
    role: OrganisationRole
    limit: Int
    offset: Int
  ): [Organisation!]

  norganisations (
    role: OrganisationRole
  ): Int!

  events (
    organisationId: ID
    after: Date
    before: Date
    answer: EventAnswer
    limit: Int
    offset: Int
  ): [Event!]

  nevents (
    organisationId: ID
    after: Date
    before: Date
    answer: EventAnswer
  ): Int!
}

type OrganisationUser {
  ref: ID!
  firstname: String
  lastname: String
  fullname: String
  email: String
  avatar: String
  birthday: Date
  birthplace: String
  phone1: String
  phone2: String

  events (
    after: Date
    before: Date
    answer: EventAnswer
    limit: Int
    offset: Int
  ): [Event!]

  role: OrganisationRole
}

input UserUpdateInput {
  firstname: String
  lastname: String
  email: String
  password: String
}
